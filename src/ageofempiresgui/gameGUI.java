/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ageofempiresgui;

import javax.swing.table.DefaultTableModel;
import empiresage.*;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.io.IOException;
import java.io.File;
import java.io.FileWriter;
import java.util.Arrays;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Random;
import java.util.Scanner;
import javax.swing.Timer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Second;


/**
 *
 * @author Steve Bennett
 */
public class gameGUI extends javax.swing.JFrame {
//    String player1;
//    String player2;
    /**
     * Creates new form gameGUI
     */
    
    DefaultTableModel tm;
    double time;
    String winner = "";
    public gameGUI() {
        initComponents();
        
        
        String column_names[]= {"Prop","NON","NegaMax"};
        tm =new DefaultTableModel(column_names,3);
        tm.getDataVector().removeAllElements();
        
        jTable1.setModel(tm);
        jTable1.removeAll();
        int i;
        for (i=0;i<6;i++ ) 
            {
                Object o[] = {"",0,0};
                tm.addRow(o);
            }
    }
    
    
    
    public void showState(HashMap <String,Integer> state,double time,String winner)
    {
        String[] props = new String[]{"numberOfVillagersPlayer","numberOfFightersPlayer","numberOfHousesPlayer",
                        "numberOfFightingUnit","woodPlayer","foodPlayer"};
        int i;
        
        for (i=0;i<props.length;i++) {
            String key = props[i];
            String shownKey = key.replaceFirst("Player", "");
            tm.setValueAt(shownKey, i, 0);
            tm.setValueAt(state.get(key+"One"), i, 1);
            tm.setValueAt(state.get(key+"Two"), i, 2);
            this.time = Math.round(time * 10000.0) / 10000.0;
        }
        if(this.time != 0.0) {
                jLabel1.setText("Execution Time");
                jLabel2.setText(String.valueOf(this.time));
                barChart();
            }
            this.winner = winner;
            if(!("".equals(winner))) {
                jLabel4.setText(this.winner);
            }
    }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BarChart = new javax.swing.JPanel();
        LineChart = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        LineChart2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Age Of Empires");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(900, 600));
        setType(java.awt.Window.Type.POPUP);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Export");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "MiniMax", "MonteCarlo", "MCTS" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Execution Time");

        jLabel2.setText("0.0");

        jLabel3.setText("Winner");

        jLabel4.setText("Null");

        javax.swing.GroupLayout BarChartLayout = new javax.swing.GroupLayout(BarChart);
        BarChart.setLayout(BarChartLayout);
        BarChartLayout.setHorizontalGroup(
            BarChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 417, Short.MAX_VALUE)
        );
        BarChartLayout.setVerticalGroup(
            BarChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );

        LineChart.setPreferredSize(new java.awt.Dimension(500, 0));

        javax.swing.GroupLayout LineChartLayout = new javax.swing.GroupLayout(LineChart);
        LineChart.setLayout(LineChartLayout);
        LineChartLayout.setHorizontalGroup(
            LineChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        LineChartLayout.setVerticalGroup(
            LineChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel6.setText("Vs  NegaMax");

        javax.swing.GroupLayout LineChart2Layout = new javax.swing.GroupLayout(LineChart2);
        LineChart2.setLayout(LineChart2Layout);
        LineChart2Layout.setHorizontalGroup(
            LineChart2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        LineChart2Layout.setVerticalGroup(
            LineChart2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LineChart, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BarChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LineChart2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BarChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LineChart, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                    .addComponent(LineChart2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        LineChart.removeAll();
        LineChart2.removeAll();
        BarChart.removeAll();
        lineGraph();
        if(!("Select".equals(Algo))) {
            EmpiresAge ea = new EmpiresAge(Algo);
            ea.setUI(this);
            ea.execute();
        }
        else {
            jLabel4.setText("Select Algorithm");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void barChart() {
        String villagers1 = tm.getValueAt(0, 1).toString();
        String Fighters1 = tm.getValueAt(1, 1).toString();
        String Houses1 = tm.getValueAt(2, 1).toString();
        String Units1 = tm.getValueAt(3, 1).toString();
        String Wood1 = tm.getValueAt(4, 1).toString();
        String Food1 = tm.getValueAt(5, 1).toString();
        
        String villagers2 = tm.getValueAt(0, 2).toString();
        String Fighters2 = tm.getValueAt(1, 2).toString();
        String Houses2 = tm.getValueAt(2, 2).toString();
        String Units2 = tm.getValueAt(3, 2).toString();
        String Wood2 = tm.getValueAt(4, 2).toString();
        String Food2 = tm.getValueAt(5, 2).toString();
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        dataset.setValue(new Double(villagers1), Algo, "Villagers");
        dataset.setValue(new Double(villagers2), "NegaMax", "Villagers");
        dataset.setValue(new Double(Fighters1), Algo, "Fighters");
        dataset.setValue(new Double(Fighters2), "NegaMax", "Fighters");
        dataset.setValue(new Double(Houses1), Algo, "Houses");
        dataset.setValue(new Double(Houses2), "NegaMax", "Houses");
        dataset.setValue(new Double(Units1), Algo, "Fighting Units");
        dataset.setValue(new Double(Units2), "NegaMax", "Fighting Units");
        dataset.setValue(new Double(Wood1), Algo, "Wood");
        dataset.setValue(new Double(Wood2), "NegaMax", "Wood");
        dataset.setValue(new Double(Food1), Algo, "Food");
        dataset.setValue(new Double(Food2), "NegaMax", "Food");
        JFreeChart chart = ChartFactory.createBarChart("Algorithm Comparison", "Entities", "Numbers", dataset);
        CategoryPlot p = chart.getCategoryPlot();
        BarRenderer r = (BarRenderer) p.getRenderer();
        
        r.setSeriesPaint(0, Color.red);
        r.setSeriesPaint(0, Color.green);
        
        r.setDrawBarOutline(false);
        r.setItemMargin(0);
        ValueMarker fULimit = new ValueMarker(30);  // position is the value on the Y axis
        fULimit.setStroke(new BasicStroke(1.0f));
        fULimit.setPaint(Color.red);
        
        ValueMarker vFLimit = new ValueMarker(50);  // position is the value on the Y axis
        vFLimit.setStroke(new BasicStroke(1.0f));
        vFLimit.setPaint(Color.red);


        //add  to the plot
        p.addRangeMarker(fULimit);
        p.addRangeMarker(vFLimit);
        BarChart.setLayout(new java.awt.BorderLayout());
        ChartPanel barChart =new ChartPanel(chart);
        barChart.setPreferredSize(new Dimension(285,210));
        BarChart.add(barChart,BorderLayout.CENTER);
//        BarChart.validate();
    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling c
         String Novillgae = tm.getValueAt(0, 1).toString();
        String NoFp = tm.getValueAt(1, 1).toString();
        String NoH = tm.getValueAt(2, 1).toString();
        String NoFU = tm.getValueAt(3, 1).toString();
        String NoWP = tm.getValueAt(4, 1).toString();
        String NoFOP = tm.getValueAt(5, 1).toString();
        
        String NovillgaeMCT = tm.getValueAt(0, 2).toString();
        String NoFpMCT = tm.getValueAt(1, 2).toString();
        String NoHMCT = tm.getValueAt(2, 2).toString();
        String NoFUMCT = tm.getValueAt(3, 2).toString();
        String NoWPMCT = tm.getValueAt(4, 2).toString();
        String NoFOPMCT = tm.getValueAt(5, 2).toString();
      DefaultCategoryDataset dataset = new DefaultCategoryDataset();
      dataset.setValue(new Double(Novillgae), "Marks", "NOV");
      dataset.setValue(new Double(NovillgaeMCT), "Marks", "NOVMCt");
       dataset.setValue(new Double(NoFp), "Marks", "fp");
       dataset.setValue(new Double(NoFpMCT), "Marks", "fpMCT");
        dataset.setValue(new Double(NoH), "Marks", "NoH");
        dataset.setValue(new Double(NoHMCT), "Marks", "NoHMCt");
         dataset.setValue(new Double(NoFU), "Marks", "FU");
         dataset.setValue(new Double(NoFUMCT), "Marks", "FUMCT");
         dataset.setValue(new Double(NoWP), "Marks", "WP");
         dataset.setValue(new Double(NoWPMCT), "Marks", "WPMCT");
         dataset.setValue(new Double(NoFOP), "Marks", "FOP");
          dataset.setValue(new Double(NoFOPMCT), "Marks", "FOPMCT");
         JFreeChart chart = ChartFactory.createLineChart("AlgorithmComparison", "Entities", "Numbers", dataset, PlotOrientation.VERTICAL, false, true, false);
      CategoryPlot p =chart.getCategoryPlot();
      p.setRangeGridlinePaint(Color.BLACK);
      p.getRenderer().setSeriesPaint(2, new Color(128,50,50));
      ChartFrame frame =new ChartFrame("Barchart",chart);
      frame.setVisible(true);
      frame.setSize(450, 350);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String villgers1 = tm.getValueAt(0, 1).toString();
        String fighter1 = tm.getValueAt(1, 1).toString();
        String house1 = tm.getValueAt(2, 1).toString();
        String funit1 = tm.getValueAt(3, 1).toString();
        String wood1 = tm.getValueAt(4, 1).toString();
        String food1 = tm.getValueAt(5, 1).toString();

        String villgers2 = tm.getValueAt(0, 2).toString();
        String fighter2 = tm.getValueAt(1, 2).toString();
        String house2 = tm.getValueAt(2, 2).toString();
        String funit2 = tm.getValueAt(3, 2).toString();
        String wood2 = tm.getValueAt(4, 2).toString();
        String food2 = tm.getValueAt(5, 2).toString();

        String csvFile = "C:/Users/ma17ahp/abc.csv";
        try
        {
            FileWriter writer = new FileWriter(csvFile,true); //the true will append the new data
            File f = new File("C:/Users/ma17ahp/abc.csv");
            if(!f.exists() || f.length() == 0) {
                csv.writeLine(writer, Arrays.asList("#","1"));
                csv.writeLine(writer, Arrays.asList("Algorithms", "Villagers", "Fighters", "Houses", "Fighting Units", "Wood", "Food"));
            }
            else {
                csv.writeLine(writer, Arrays.asList());
                Scanner in = null;
                int lastNo = 0;
                try {
                    in = new Scanner(f);

                    while(in.hasNext())
                    {
                        String line=in.nextLine();
                        if(line.contains("#"))
                        lastNo = Integer.parseInt(line.replaceAll("\\D+",""));
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                csv.writeLine(writer, Arrays.asList("#", String.valueOf(++lastNo)));
            }

            if(!("NegaMax".equals(winner))) {
                csv.writeLine(writer, Arrays.asList(Algo ,villgers1, fighter1, house1, funit1, wood1, food1, "Wins"), ',', '"');
                    csv.writeLine(writer, Arrays.asList("NegaMax" ,villgers2, fighter2, house2, funit2, wood2, food2), ',', '"');
                    }
                    else {
                        csv.writeLine(writer, Arrays.asList(Algo ,villgers1, fighter1, house1, funit1, wood1, food1), ',', '"');
                            csv.writeLine(writer, Arrays.asList("NegaMax" ,villgers2, fighter2, house2, funit2, wood2, food2, "Wins"), ',', '"');
                            }

                            csv.writeLine(writer, Arrays.asList("Execution Time" ,String.valueOf(time)));

                            writer.close();
                            System.err.println("Saved");
                        }
                        catch(IOException ioe)
                        {
                            System.err.println("IOException: " + ioe.getMessage());
                        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        Algo = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
        System.out.println(Algo);
        JTableHeader th = jTable1.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(1);
        tc.setHeaderValue( Algo );
        th.repaint();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private static final String TITLE = "Dynamic Series";
    private static final String START = "Start";
    private static final String STOP = "Stop";
    private static final float MINMAX = 100;
    private static final int COUNT = 2 * 60;
    private static final int FAST = 100;
    private static final int SLOW = FAST * 5;
    private static final Random random = new Random();
    private Timer timer;

    void lineGraph(){
        p1Line();
        p2Line();
//        timer = new Timer(10, new ActionListener() {
//        @Override
//            public void actionPerformed(ActionEvent e) {
//                p1Line();
//                repaint();
//            }
//        });
    }
    
    void p1Line() {
        EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
            final DynamicTimeSeriesCollection dataset = new DynamicTimeSeriesCollection(6, COUNT, new Second());
            dataset.setTimeBase(new Second(0, 0, 0, 1, 1, 2011));
            dataset.addSeries(villagers(1), 0, "Villagers");
            dataset.addSeries(fighters(1), 1, "Fighters");
            dataset.addSeries(houses(1), 2, "Houses");
            dataset.addSeries(units(1), 3, "Fighting Units");
            dataset.addSeries(wood(1), 4, "Wood");
            dataset.addSeries(food(1), 5, "Food");
            final JFreeChart chart = ChartFactory.createTimeSeriesChart(Algo, "Time", "Numbers", dataset, true, true, false);
            final XYPlot plot = chart.getXYPlot();
            ValueAxis domain = plot.getDomainAxis();
            domain.setAutoRange(true);
            ValueAxis range = plot.getRangeAxis();
            range.setRange(0, 500);
//            timer.start();
            
            LineChart.setLayout(new java.awt.BorderLayout());
            ChartPanel lineChart =new ChartPanel(chart);
            lineChart.setPreferredSize(new Dimension(500,500));
            LineChart.add(lineChart, BorderLayout.CENTER);
            timer = new Timer(FAST, new ActionListener() {

                float[] newData = new float[6];

                @Override
                public void actionPerformed(ActionEvent e) {
                    newData[0] = randomValue(0,1);
                    newData[1] = randomValue(1,1);
                    newData[2] = randomValue(2,1);
                    newData[3] = randomValue(3,1);
                    newData[4] = randomValue(4,1);
                    newData[5] = randomValue(5,1);
                    if(time == 0.0) {
                        dataset.advanceTime();
                    }

                    dataset.appendData(newData);
                }
            });
            pack();
            setVisible(true);
            start();
            }
        });
    }
    
    void p2Line() {
        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
            final DynamicTimeSeriesCollection dataset = new DynamicTimeSeriesCollection(6, COUNT, new Second());
            dataset.setTimeBase(new Second(0, 0, 0, 1, 1, 2011));
            dataset.addSeries(villagers(2), 0, "Villagers");
            dataset.addSeries(fighters(2), 1, "Fighters");
            dataset.addSeries(houses(2), 2, "Houses");
            dataset.addSeries(units(2), 3, "Fighting Units");
            dataset.addSeries(wood(2), 4, "Wood");
            dataset.addSeries(food(2), 5, "Food");
            final JFreeChart chart = ChartFactory.createTimeSeriesChart("NegaMax", "Time", "Numbers", dataset, true, true, false);
            final XYPlot plot = chart.getXYPlot();
            ValueAxis domain = plot.getDomainAxis();
            domain.setAutoRange(true);
            ValueAxis range = plot.getRangeAxis();
            range.setRange(0, 500);
//            timer.start();
            
            LineChart2.setLayout(new java.awt.BorderLayout());
            ChartPanel lineChart =new ChartPanel(chart);
            lineChart.setPreferredSize(new Dimension(500,500));
            LineChart2.add(lineChart, BorderLayout.CENTER);
            timer = new Timer(FAST, new ActionListener() {

                float[] newData = new float[6];

                @Override
                public void actionPerformed(ActionEvent e) {
                    newData[0] = randomValue(0,2);
                    newData[1] = randomValue(1,2);
                    newData[2] = randomValue(2,2);
                    newData[3] = randomValue(3,2);
                    newData[4] = randomValue(4,2);
                    newData[5] = randomValue(5,2);
                    if(time == 0.0) {
                        dataset.advanceTime();
                    }

                    dataset.appendData(newData);
                }
            });
            pack();
            setVisible(true);
            start();
            }
        });
    }

    private int randomValue(int i, int j) {
//        System.out.println(tm.getValueAt(5, 1));
        return (int) tm.getValueAt(i, j);
    }

    private float[] villagers(int j) {
        float[] a = new float[COUNT];
        for (int i = 0; i < a.length; i++) {
            a[i] = randomValue(0, j);
        }
        return a;
    }
    private float[] fighters(int j) {
        float[] a = new float[COUNT];
        for (int i = 0; i < a.length; i++) {
            a[i] = randomValue(1, j);
        }
        return a;
    }
    private float[] houses(int j) {
        float[] a = new float[COUNT];
        for (int i = 0; i < a.length; i++) {
            a[i] = randomValue(2, j);
        }
        return a;
    }
    private float[] units(int j) {
        float[] a = new float[COUNT];
        for (int i = 0; i < a.length; i++) {
            a[i] = randomValue(3, j);
        }
        return a;
    }
    private float[] wood(int j) {
        float[] a = new float[COUNT];
        for (int i = 0; i < a.length; i++) {
            a[i] = randomValue(4, j);
        }
        return a;
    }
    private float[] food(int j) {
        float[] a = new float[COUNT];
        for (int i = 0; i < a.length; i++) {
            a[i] = randomValue(5, j);
        }
        return a;
    }

//    private JFreeChart createChart(final XYDataset dataset) {
//        
////        return result;
//    }

    public void start() {
        timer.start();
    }
    
    /**
     * @param args the command line arguments
     */
    
    String Algo = "Select";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BarChart;
    private javax.swing.JPanel LineChart;
    private javax.swing.JPanel LineChart2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
